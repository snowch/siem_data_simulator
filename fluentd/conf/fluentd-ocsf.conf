<system>
 @log_level debug
</system>

<source>
 @type tail
 path /logs/events.log
 pos_file /fluentd/log/events.log.pos
 tag simulator.event
 <parse>
 @type regexp
 expression /^(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+) event=(?<event>\S+) user=(?<user>\S+) src_ip=(?<src_ip>\S+) dst_ip=(?<dst_ip>\S+).*$/
 time_key time
 time_format %Y-%m-%d %H:%M:%S.%N
 </parse>
 multiline_flush_interval 5s
</source>

# Transform to OCSF format
<filter simulator.event>
 @type record_transformer
 enable_ruby true
 <record>
   # OCSF Base Event Fields
   metadata {
     "version": "1.0.0",
     "product": {
       "name": "Traffic Simulator",
       "vendor_name": "Custom",
       "version": "1.0"
     },
     "profiles": ["security_control"]
   }
   
   # OCSF Class ID mapping based on event type
   class_uid ${
     case record["event"]
     when /ssh_login_success|ssh_login_failure/
       3002  # Authentication
     when /web_login_success|web_login_failure/
       3002  # Authentication  
     when /brute_force_attack/
       2004  # Security Finding
     when /sql_injection_attempt/
       2004  # Security Finding
     when /malware_detection/
       2001  # Malware Finding
     when /data_exfiltration/
       4002  # Network Activity
     when /file_access/
       1001  # File Activity
     else
       2004  # Generic Security Finding
     end
   }
   
   # Activity ID based on success/failure
   activity_id ${
     case record["event"]
     when /success/
       1  # Allow/Success
     when /failure|attack|injection|malware|exfiltration/
       2  # Deny/Failure
     else
       99 # Other
     end
   }
   
   # Severity mapping
   severity_id ${
     case record["event"]
     when /success/
       1  # Informational
     when /failure/
       2  # Low
     when /brute_force|injection/
       3  # Medium
     when /malware|exfiltration/
       4  # High
     else
       2  # Low
     end
   }
   
   # Status mapping
   status_id ${
     case record["event"]
     when /success/
       1  # Success
     when /failure|attack|injection|malware|exfiltration/
       2  # Failure
     else
       99 # Other
     end
   }
   
   # Actor (user) information
   actor {
     "user": {
       "name": "${record['user']}",
       "type": "User",
       "uid": "${record['user']}"
     }
   }
   
   # Source endpoint
   src_endpoint {
     "ip": "${record['src_ip']}",
     "type": "Unknown"
   }
   
   # Destination endpoint  
   dst_endpoint {
     "ip": "${record['dst_ip']}",
     "type": "Unknown"
   }
   
   # Event time
   time_dt "${Time.parse(record['time']).utc.strftime('%Y-%m-%dT%H:%M:%S.%LZ')}"
   
   # Message description
   message "${record['event']} from ${record['user']} (${record['src_ip']} -> ${record['dst_ip']})"
   
   # Category based on event type
   category_name ${
     case record["event"]
     when /login/
       "Identity & Access Management"
     when /file/
       "System Activity"
     when /attack|injection|malware|exfiltration/
       "Findings"
     else
       "Network Activity"
     end
   }
   
   # Type name
   type_name ${
     case record["event"]
     when /ssh_login/
       "SSH Authentication"
     when /web_login/
       "Web Authentication"
     when /brute_force/
       "Brute Force Attack"
     when /sql_injection/
       "SQL Injection"
     when /malware/
       "Malware Detection"
     when /data_exfiltration/
       "Data Exfiltration"
     when /file_access/
       "File Access"
     else
       "Security Event"
     end
   }
   
   # Remove original fields to clean up
   event nil
   user nil
   src_ip nil
   dst_ip nil
 </record>
</filter>

# Output to Kafka with OCSF format
<match simulator.event>
 @type kafka2
 brokers "#{ENV['KAFKA_BROKER']}"
 default_topic "#{ENV['KAFKA_EVENT_LOG_TOPIC']}"
 <format>
 @type json
 </format>
 <buffer>
 flush_interval 5s
 chunk_limit_size 1m
 flush_thread_count 2
 </buffer>
</match>
