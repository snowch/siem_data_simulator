<system>
 @log_level debug
</system>

<source>
 @type tail
 path /logs/events.log
 pos_file /fluentd/log/events.log.pos
 tag simulator.event
 <parse>
 @type regexp
 expression /^(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+) event=(?<event>\S+) user=(?<user>\S+) src_ip=(?<src_ip>\S+) dst_ip=(?<dst_ip>\S+).*$/
 time_key time
 time_format %Y-%m-%d %H:%M:%S.%N
 </parse>
 multiline_flush_interval 5s
</source>

# Simple OCSF transformation
<filter simulator.event>
 @type record_transformer
 <record>
   # OCSF metadata
   ocsf_version "1.0.0"
   ocsf_product_name "Traffic Simulator"
   ocsf_vendor_name "Custom"
   
   # Basic OCSF fields
   class_uid 2004
   activity_id 2
   severity_id 2
   status_id 2
   
   # Actor information
   actor_user_name ${record["user"]}
   actor_user_type "User"
   
   # Endpoints
   src_endpoint_ip ${record["src_ip"]}
   dst_endpoint_ip ${record["dst_ip"]}
   
   # Message
   message "Security event: ${record['event']} from ${record['user']}"
   
   # Category
   category_name "Security Finding"
   type_name "Security Event"
   
   # Original event type for reference
   original_event_type ${record["event"]}
 </record>
</filter>

# Output to Kafka with OCSF format
<match simulator.event>
 @type kafka2
 brokers "#{ENV['KAFKA_BROKER']}"
 default_topic "#{ENV['KAFKA_EVENT_LOG_TOPIC']}"
 <format>
 @type json
 </format>
 <buffer>
 flush_interval 5s
 chunk_limit_size 1m
 flush_thread_count 2
 </buffer>
</match>
