<system>
  @log_level debug
</system>

<source>
  @type tail
  path /logs/events.log
  pos_file /fluentd/log/events.log.pos
  tag simulator.event
  multiline_flush_interval 5s
  <parse>
    @type regexp
    expression /^(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+) event=(?<event>\S+) user=(?<user>\S+) src_ip=(?<src_ip>\S+) dst_ip=(?<dst_ip>\S+).*$/
    time_key time
    time_format %Y-%m-%d %H:%M:%S.%N
  </parse>
</source>

<filter simulator.event>
  @type record_transformer
  enable_ruby true
  remove_keys event,user,src_ip,dst_ip
  <record>
    # OCSF Base Event Fields - create nested metadata structure
    metadata ${ {"version" => "1.0.0", "product" => {"name" => "Traffic Simulator", "vendor_name" => "Custom", "version" => "1.0", "uid" => "traffic-simulator-001"}, "profiles" => ["security_control"]} }
    
    # OCSF Class ID mapping based on event type
    class_uid ${case record["event"]; when /ssh_login_success|ssh_login_failure/; 3002; when /web_login_success|web_login_failure/; 3002; when /brute_force_attack/; 2004; when /sql_injection_attempt/; 2004; when /malware_detection/; 2001; when /data_exfiltration/; 4002; when /file_access/; 1001; else; 2004; end}
    
    # Activity ID based on success/failure
    activity_id ${case record["event"]; when /success/; 1; when /failure|attack|injection|malware|exfiltration/; 2; else; 99; end}
    
    # Severity mapping
    severity_id ${case record["event"]; when /success/; 1; when /failure/; 2; when /brute_force|injection/; 3; when /malware|exfiltration/; 4; else; 2; end}
    
    # Status mapping
    status_id ${case record["event"]; when /success/; 1; when /failure|attack|injection|malware|exfiltration/; 2; else; 99; end}
    
    # Category UID - required for OCSF events
    category_uid ${case record["event"]; when /login/; 3; when /file/; 1; when /attack|injection|malware|exfiltration/; 2; else; 4; end}
    
    # Class name for readability
    class_name ${case record["event"]; when /ssh_login|web_login/; "Authentication"; when /brute_force|sql_injection|malware|data_exfiltration/; "Security Finding"; when /file_access/; "File System Activity"; else; "Security Finding"; end}
    
    # Actor (user) information - create nested structure
    actor ${ {"user" => {"name" => record['user'], "type" => "User", "uid" => record['user']}} }
    
    # Source endpoint - create nested structure
    src_endpoint ${ {"ip" => record['src_ip'], "type" => "Unknown"} }
    
    # Destination endpoint - create nested structure
    dst_endpoint ${ {"ip" => record['dst_ip'], "type" => "Unknown"} }
    
    # Event time - set both time and time_dt
    time ${time.to_i}
    time_dt ${time.utc.strftime('%Y-%m-%dT%H:%M:%S.%LZ')}
    
    # Message description
    message ${"Security event: " + record['event'] + " from " + record['user'] + " (" + record['src_ip'] + " -> " + record['dst_ip'] + ")"}
    
    # Category name
    category_name ${case record["event"]; when /login/; "Identity & Access Management"; when /file/; "System Activity"; when /attack|injection|malware|exfiltration/; "Findings"; else; "Network Activity"; end}
    
    # Activity name for better readability
    activity_name ${case record["event"]; when /success/; "Allow"; when /failure|attack|injection|malware|exfiltration/; "Deny"; else; "Unknown"; end}
    
    # Type name
    type_name ${case record["event"]; when /ssh_login/; "SSH Authentication"; when /web_login/; "Web Authentication"; when /brute_force/; "Brute Force Attack"; when /sql_injection/; "SQL Injection"; when /malware/; "Malware Detection"; when /data_exfiltration/; "Data Exfiltration"; when /file_access/; "File Access"; else; "Security Event"; end}
    
    # Store original event data as a JSON string (OCSF raw_data field expects string)
    raw_data ${ {"original_event_type" => record['event'], "user_name" => record['user'], "src_ip" => record['src_ip'], "dst_ip" => record['dst_ip']}.to_json }
  </record>
</filter>

<match simulator.event>
  @type kafka2
  # kafka output environment vars
  brokers "#{ENV['KAFKA_BROKER']}"
  default_topic "#{ENV['KAFKA_EVENT_LOG_TOPIC']}"
  <format>
    @type json
  </format>
  <buffer>
    flush_interval 5s
    chunk_limit_size 1m
    flush_thread_count 2
  </buffer>
</match>